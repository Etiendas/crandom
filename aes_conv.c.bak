#include <sys/types.h>

static u_int32_t aes_tables[1024];

static inline u_int32_t s(u_int32_t rotation, u_int32_t x) {
  return aes_tables[256*rotation + (x&0xff)];
}

extern "C" void aes_refill(unsigned long long iv, unsigned long long ivhi, char data[128]) {
  u_int32_t *buffer = (u_int32_t *) &data[0];
  u_int32_t key[8];
  
  int i,j,r2;
  u_int32_t a,b,c,d, a2,b2,c2,d2, k, k2;
  
  for (i=0; i<8; i++) key[i] = buffer[i];
  
  // pre-whitening
  a = (iv+i)     ^ key[0];
  b = (iv>>32)   ^ key[1];
  c = (ivhi)     ^ key[2];
  d = (ivhi>>32) ^ key[3];
  
  // round 1, with ctr-mode caching
  a2 = s(2, c>>8) ^ s(3, d);
  b2 = s(2, d>>8);
  c2 = s(2, a>>8) ^ s(3, b);
  d2 = s(2, b>>8) ^ s(3, c);
  a >>= 16; b >>= 16; c >>= 16; d >>= 16;
  a2 ^= s(1, b) ^ s(0, a>>8) ^ key[4];
  b2 ^= s(1, c) ^ s(0, b>>8) ^ key[5];
  c2 ^= s(1, d) ^ s(0, c>>8) ^ key[6];
  d2 ^= s(1, a) ^ s(0, d>>8) ^ key[7];
  
  k = key[0];
  for (i=0; i<8; i++) {
    buffer[4*i + 0] = a2;
    buffer[4*i + 1] = b2 ^ s(3, (iv+i)^k);
    buffer[4*i + 2] = c2;
    buffer[4*i + 3] = d2;
  }
  
  for (r2 = 0; r2 < 6; r2++) {  
    k = key[7];
    k2  = (s(0, k >> 24) & 0xff);
    k2 ^= (s(0, k >> 16) & 0xff)<<24;
    k2 ^= (s(0, k >>  8) & 0xff)<<16;
    k2 ^= (s(0, k      ) & 0xff)<< 8;
    k2 ^= 1ull << (24+r2);
    k = k2;
    
    key[0] = k = k^key[0];
    key[1] = k = k^key[1];
    key[2] = k = k^key[2];
    key[3] = k = k^key[3];
    
    k2  = (s(0, k >> 24) & 0xff)<<24;
    k2 ^= (s(0, k >> 16) & 0xff)<<16;
    k2 ^= (s(0, k >>  8) & 0xff)<< 8;
    k2 ^= (s(0, k      ) & 0xff);
    k = k2;
    
    key[4] = k = k^key[4];
    key[5] = k = k^key[5];
    key[6] = k = k^key[6];
    key[7] = k = k^key[7];
  
    for (i=0; i<8; i++) {
      
      a = buffer[4*i+0];
      b = buffer[4*i+1];
      c = buffer[4*i+2];
      d = buffer[4*i+3];
      
      a2 = s(2, c>>8) ^ s(3, d);
      b2 = s(2, d>>8) ^ s(3, a);
      c2 = s(2, a>>8) ^ s(3, b);
      d2 = s(2, b>>8) ^ s(3, c);
      a >>= 16; b >>= 16; c >>= 16; d >>= 16;
      a2 ^= s(1, b) ^ s(0, a>>8) ^ key[4];
      b2 ^= s(1, c) ^ s(0, b>>8) ^ key[5];
      c2 ^= s(1, d) ^ s(0, c>>8) ^ key[6];
      d2 ^= s(1, a) ^ s(0, d>>8) ^ key[7];
      
      a=a2; b=b2; c=c2; d=d2;
      
      a2 = s(2, c>>8) ^ s(3, d);
      b2 = s(2, d>>8) ^ s(3, a);
      c2 = s(2, a>>8) ^ s(3, b);
      d2 = s(2, b>>8) ^ s(3, c);
      a >>= 16; b >>= 16; c >>= 16; d >>= 16;
      a2 ^= s(1, b); a2 ^= s(0, a>>8); a2 ^= key[0];
      b2 ^= s(1, c); b2 ^= s(0, b>>8); b2 ^= key[1];
      c2 ^= s(1, d); c2 ^= s(0, c>>8); c2 ^= key[2];
      d2 ^= s(1, a); d2 ^= s(0, d>>8); d2 ^= key[3];
      
      buffer[4*i+0] = a2;
      buffer[4*i+1] = b2;
      buffer[4*i+2] = c2;
      buffer[4*i+3] = d2;
    }
  }
  
  k = key[7];
  k2  = (s(0, k >> 24) & 0xff);
  k2 ^= (s(0, k >> 16) & 0xff)<<24;
  k2 ^= (s(0, k >>  8) & 0xff)<<16;
  k2 ^= (s(0, k      ) & 0xff)<< 8;
  k2 ^= 1ull << (24+r2);
  k = k2;
  
  key[0] = k = k^key[0];
  key[1] = k = k^key[1];
  key[2] = k = k^key[2];
  key[3] = k = k^key[3];
}
